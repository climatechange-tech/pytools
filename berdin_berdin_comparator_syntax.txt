miscellaneous/merge_audio_and_video_main.py:    if obj_type == bo_types[0]:
miscellaneous/merge_audio_and_video_main.py:        if obj_type == bo_types[0]:
miscellaneous/merge_audio_and_video_main.py:    if obj_type == bo_types[0]:
miscellaneous/merge_audio_and_video_main.py:    elif obj_type == bo_types[1]:
miscellaneous/merge_audio_and_video_main.py:        if obj_type == bo_types[0]:
miscellaneous/merge_audio_and_video_main.py:        elif obj_type == bo_types[1]:
miscellaneous/merge_audio_and_video_main.py:            if obj_type == bo_types[0]:
miscellaneous/merge_audio_and_video_main.py:            elif obj_type == bo_types[1]:
miscellaneous/merge_audio_and_video_main.py:            if obj_type == bo_types[0]:
miscellaneous/merge_audio_and_video_main.py:            elif obj_type == bo_types[1]:
miscellaneous/merge_audio_and_video_main.py:            if obj_type == bo_types[0]:
miscellaneous/merge_audio_and_video_main.py:            elif obj_type == bo_types[1]:
miscellaneous/merge_audio_and_video_main.py:        if obj_type == bo_types[0]:
miscellaneous/merge_audio_and_video_main.py:        elif obj_type == bo_types[1]:
miscellaneous/merge_audio_and_video_main.py:            if obj_type == bo_types[0]:
miscellaneous/merge_audio_and_video_main.py:            elif obj_type == bo_types[1]:
files_and_directories/bulk_numRename_main.py:    if obj_type == bo_types[0]:
files_and_directories/bulk_numRename_main.py:        if obj_type == bo_types[0]:
files_and_directories/bulk_numRename_main.py:    if obj_type == bo_types[0]:
files_and_directories/bulk_numRename_main.py:    elif obj_type == bo_types[1]:
files_and_directories/bulk_numRename_main.py:        if obj_type == bo_types[0]:
files_and_directories/bulk_numRename_main.py:        elif obj_type == bo_types[1]:
files_and_directories/bulk_numRename_main.py:            if obj_type == bo_types[0]:
files_and_directories/bulk_numRename_main.py:            elif obj_type == bo_types[1]:
files_and_directories/bulk_numRename_main.py:            if obj_type == bo_types[0]:
files_and_directories/bulk_numRename_main.py:            elif obj_type == bo_types[1]:
files_and_directories/bulk_numRename_main.py:            if obj_type == bo_types[0]:
files_and_directories/bulk_numRename_main.py:            elif obj_type == bo_types[1]:
files_and_directories/bulk_numRename_main.py:        if obj_type == bo_types[0]:
files_and_directories/bulk_numRename_main.py:        elif obj_type == bo_types[1]:
files_and_directories/bulk_numRename_main.py:            if obj_type == bo_types[0]:
files_and_directories/bulk_numRename_main.py:            elif obj_type == bo_types[1]:
files_and_directories/file_and_directory_paths.py:                    and file.suffix == f".{ext}"]
files_and_directories/file_and_directory_paths.py:                    and file.suffix == f".{ext}"]
files_and_directories/file_format_tweaker.py:    if output_path == default_arg:
files_and_directories/change_permissions_main.py:    if obj_type == bo_types[0]:
files_and_directories/change_permissions_main.py:    elif obj_type == bo_types[1]:
files_and_directories/change_permissions_main.py:    if obj_type == bo_types[0]:
files_and_directories/change_permissions_main.py:    elif obj_type == bo_types[1]:
time_handling/calendar_attibute_operators.py:        elif min_idx_year_diff == max_idx_year_diff:
time_handling/calendar_attibute_operators.py:        if start_year == end_year:
time_handling/calendar_attibute_operators.py:        if start_year == end_year:
weather_and_climate/climate_indicators.py:        hdata_MONTH = hourly_df[hourly_df.date.dt.month == m].filter(items = varlist_primary)\
weather_and_climate/climate_indicators.py:        hdata_MONTH_dm_bymonth = hdata_MONTH_dm[hdata_MONTH_dm.date.dt.month == m]\
weather_and_climate/climate_indicators.py:                hdata_MONTH_ym = hdata_MONTH_rank_phi[(hdata_MONTH_rank_phi.date.dt.year == y)
weather_and_climate/climate_indicators.py:                                                      & (hdata_MONTH_rank_phi.date.dt.month == m)]
weather_and_climate/climate_indicators.py:                        hdata_MONTH_ym_var_sel.loc[i].date == hdata_MONTH_rank_phi.date
weather_and_climate/climate_indicators.py:        hourly_data_sel = hourly_df[(hourly_df.date.dt.year == lowest_total_rank_year)
weather_and_climate/climate_indicators.py:                                    &(hourly_df.date.dt.month == m)]
weather_and_climate/climate_indicators.py:        = pd.unique(HDY_interp[(HDY_interp.date.dt.year == HDY_years[i])
weather_and_climate/climate_indicators.py:                        &(HDY_interp.date.dt.month == HDY_months[i])].date.dt.day)
weather_and_climate/climate_indicators.py:        = pd.unique(HDY_interp[(HDY_interp.date.dt.year == HDY_years[i+1])
weather_and_climate/climate_indicators.py:                        &(HDY_interp.date.dt.month == HDY_months[i+1])].date.dt.day)
weather_and_climate/climate_statistics.py:        elif freq == freq_abbrs[1] and season_months is None:
weather_and_climate/climate_statistics.py:        elif freq == freq_abbrs[1] and season_months is not None:
weather_and_climate/climate_statistics.py:            elif freq == time_freqs[1] and season_months is None:
weather_and_climate/climate_statistics.py:            elif freq == time_freqs[1] and season_months is not None:
weather_and_climate/climate_statistics.py:            elif freq == freq_abbrs[1] and season_months is None:
weather_and_climate/climate_statistics.py:            elif freq == freq_abbrs[1] and season_months is not None:
weather_and_climate/climate_statistics.py:        elif time_freq == time_freqs[1]:
weather_and_climate/netcdf_handler.py:        if llats == llons == 1:
weather_and_climate/meteorological_variables.py:    if u_records == v_records:
weather_and_climate/weather_software_file_creator.py:    iaprox_winter_min = np.where(hdy_df_t2m_winter == HDY_winter_min)[0][0]
weather_and_climate/weather_software_file_creator.py:    iaprox_summer_max = np.where(hdy_df_t2m_summer == HDY_summer_max)[0][0]
weather_and_climate/weather_software_file_creator.py:            if ivar == HDY_ncols-1:
weather_and_climate/cdo_tools.py:    if period_abbr == period_abbrs[3]:
strings/string_handler.py:        if obj_spec_key == objSpecsKeys[3] and splitchar is None:
strings/string_handler.py:        if obj2modify == objSpecsKeys[2]:
strings/string_handler.py:        elif obj2modify == objSpecsKeys[3]:
arrays_and_lists/array_handler.py:            if data_type == old_type or old_type in data_type.str:
arrays_and_lists/array_handler.py:            if data_type == old_type or old_type in data_type.str:
