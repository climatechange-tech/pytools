#! /bin/zsh

# By means of this script words or phrase fragments
# that contain certain files can be modified by new ones,
# eliminating the need of performing it individual and manually.
#
# The default and reccommended functioning is such that
# it uses 'grep' command recursively (-r argument),
# not distinguishing between lowercases and uppercases (-i argument)
# and instead of displaying part of the match case into the screen,
# it limits to display the case-matching file's name (-l argument).
#
# All files are stored in another text file, so that the script then
# reads recursively from that file, using 'vim' interactively
# to perform the changes. It automatically distinguishes
# between forward- and non-forward-slashed cases.
#
# The aforementioned text file's name is redundant because
# it is then removed.
# 
# Parameters
# ----------
# old_syntax : str
#       String that contains the words to be found.
#       If it contains forward slashes (e.g for directories),
#       then manually write a backslash BEFORE EVERY FORWARD SLASH.
# new_syntax : 
#       String that contains the words to be modified.
#
# Result
# ------
# All changes are performed according to the case-matching files.

#---------------------------------#
# Specify the default file's name #
#---------------------------------#

# All files matching the desired extension which
# contain the specified old syntax will appear in this file

default_filename="files_to_perform_changes.txt"

# Set the old syntax and the one to substitute with #
old_syntax='get_current_time'
new_syntax='get_current_datetime'

# Write every result to the default file #
grep -irl --include="*.py" $old_syntax > $default_filename 

#--------#
# Case 1 #
#--------#

# The old syntax contains at least one forward slash.
# Then that string can be interpreted as an array and
# the regex to find the string in 'vim' has to involve it.

if [[ $old_syntax == *"/"* ]]; then
    while read line
    do
        vim -E -s $line << EOF
        :%s/${old_syntax[@]}/${new_syntax[@]}
        :wq
EOF
    done < $default_filename

#--------#
# Case 2 #
#--------#

# The old syntax does not contain any forward slash.
# Then the strings are true strings and 
# the regex to find the string in 'vim' in simpler.

else
    while read line
    do
        vim -E -s $line << EOF
        :%s/$old_syntax/$new_syntax
        :wq
EOF
    done < $default_filename

fi 

#-------------------------#
# Remove the default file #
#-------------------------#

rm $default_filename
